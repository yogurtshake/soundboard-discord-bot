-------------------------------------------------------------------------
			DISCORD BOT INSTRUCTIONS
-------------------------------------------------------------------------

-------------------------------------------------------------------------
Section 1: How to set up a free GCP server for your bot
-------------------------------------------------------------------------


1. Set up a GCP Compute Engine Virtual Machine (free tier: https://cloud.google.com/free/docs/free-cloud-features#free-tier).

   Then connect your VM instance via SSH window.

-------------------------------------------------------------------------

2. Install python:

-> sudo apt update
-> sudo apt install python3-venv

-------------------------------------------------------------------------

3. Create a virtual python environment for the bot:

-> python3 -m venv myenv

-------------------------------------------------------------------------

4. Activate the environment and then install dependencies to it (discord.py, pynacl, asyncio, etc.):

-> source myenv/bin/activate

-> pip install discord.py pynacl asyncio dotenv

-------------------------------------------------------------------------

5. Install other dependencies to your server (I need ffmpeg and git):

-> sudo apt install ffmpeg -y

-> sudo apt install git -y (if you want to keep your bot updated with git)



-------------------------------------------------------------------------
Section 2: Other SSH Window instructions - Once the bot.py script exists
-------------------------------------------------------------------------


1. to activate the virtual python environment that has the dependencies installed for the discord bot, use the following command:

-> source myenv/bin/activate

-------------------------------------------------------------------------

2. to start the bot use:

-> nohup python bot.py >> output.log 2>&1 &

Explanation:
    nohup - keeps running after disconnecting
    python bot.py - runs the bot script
    >> output.log - appends logs to output.log
    2>&1 - includes error messages in the same log file
    & - runs in the background

   NOTE: must be in the directory where bot.py is located.

-------------------------------------------------------------------------

3. TO SAVE TIME, create a custom shell command that does steps 1 & 2 for you when you call it. Create & edit a shell command file:

-> nano start_bot.sh

   Then enter the following (adjust based on path names):

#!/bin/bash
source myenv/bin/activate && \
cd scuffed_discord_bot && \
nohup python bot.py >> output.log 2>&1 &

   Then do CTRL+X to exit, press Y to save and then press Enter to save as start_bot.sh.


   Now, make the script executable:

-> chmod +x start_bot.sh


   Finally, move the script to /usr/local/bin/start_bot:

-> sudo mv start_bot.sh /usr/local/bin/start_bot


   Now you have a custom command, start_bot, that you can run to start the bot instead of using the series of commands detailed above.

   NOTE: you need to run the command from the directory where /myenv/ is and which is one level up from your bot.py script. 
        (assuming you have followed the instructions here, this is the default structure, and this is the directory where you begin when you connect via SSH).

-------------------------------------------------------------------------

4. to kill the script, simply use a shutdown command in discord (might have to be bot owner).

   **OR** use the following in the SSH window:

-> pkill -f bot.py

    **OR** find the script with:
	
-> ps aux | grep bot.py

   Explanation of each column:
	USER: user who owns the process
	PID: process ID (e.g., 103710, 103711, 103813)
	%CPU: percentage of CPU usage
	%MEM: percentage of memory usage
	VSZ: virtual memory size.
	RSS: resident set size (physical memory usage)
	TTY: terminal associated with the process (? for none, pts/1 for a pseudo-terminal)
	STAT: process state (e.g., S for sleeping, R for running)
	START: start time of the process
	TIME: cumulative CPU time used by the process
	COMMAND: command that started the process

   and then take the 4digit number it gives at the start and do: 

-> kill *number here*

-------------------------------------------------------------------------

5. to view logs, use a bot command in discord. Or use in SSH window:

-> tail -f output.log

-------------------------------------------------------------------------

6. to delete a folder, use:

-> rm -r foldername

   to delete a single file, just use:

-> rm filename.ext

   you can also add as many file names as you want, separated by a space

-------------------------------------------------------------------------

7. to add a new file to a folder , use:

-> mv file.ext foldername/



-------------------------------------------------------------------------
Section 3: How to use git in your VM SSH Window (github)
-------------------------------------------------------------------------


1. IF YOUR GITHUB REPO IS PRIVATE, you can use an SSH deploy key to connect your bot to your repo.

   i) generate an SSH key in your VM SSH window:
   
   -> ssh-keygen -t rsa -b 4096 -C "your-email@example.com"

      Press enter to save it in the default path (/home/youruser/.ssh/id_rsa). Press enter twice more to save without a passphrase.

   ii) display then copy the public key:

   -> cat ~/.ssh/id_rsa.pub

   iii) add the key as a deploy key in github: 

      Go to your repo in github > settings > deploy keys > add deploy key. 
      Add a title, then paste the key under Key. Allow write access if you want. Click Add Key.

   iv) test the connection in your SSH window: 

   -> ssh -T git@github.com

      Enter "yes" if prompted to do so.

      You should see the following message: 

      "Hi! You've successfully authenticated, but GitHub does not provide shell access."

-------------------------------------------------------------------------

2. Clone your repository: 

-> git clone git@github.com:yourusername/yourbot.git

-------------------------------------------------------------------------

3. Set your global git user email and username identity:

-> git config --global user.email "you@example.com"

-> git config --global user.name "Your Name"

-------------------------------------------------------------------------

4. To pull changes, navigate to the repo folder in your VM (-> cd foldername) and use:

-> git pull origin main

   To reset the local branch to match the remote branch (if you have conflicts and want to override) use:

-> git reset --hard origin/main

   To force push changes from your local branch to the remote branch (if you have conflicts and want to override) use:

-> git push --force origin main

-------------------------------------------------------------------------

5. To check the status of your repo use:

-> git fetch

-> git status

   If you are up to date, it will show the following:

   "On branch main
    Your branch is up to date with 'origin/main'."


-------------------------------------------------------------------------
